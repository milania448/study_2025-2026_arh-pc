---
## Author
author:
  name: Епихина Миланья Игоревна
  degrees: DSc
  orcid: 0000-0002-0877-7063
  email: 1132250399@pfur.ru
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 6

## Title
title: "Отчёт по лабораторной работе №2"
subtitle: "Дисциплина: Архитектура компьютеров и операционные системы"
license: "CC BY"
---

# Цель работы

Изучить идеологию и применение средств контроля версий и научиться работать с системой контроля версий git.

# Задание

1. Настройка GitHub.
2. Базовая настройка Git.
3. Создание SSH-ключа.
4. Создание рабочего пространства и репозитория курса на основе шаблона.
5. Создание репозитория курса на основе шаблона.
6. Настройка каталога курса.
7. Выполнение заданий для самостоятельной работы.

# Теоретическое введение

Системы контроля версий (Version Control System, VCS) применяются при работе нескольких человек над одним проектом. Обычно основное дерево проекта хранится в локальном или удалённом репозитории, к которому настроен доступ для участников проекта. При внесении изменений в содержание проекта система контроля версий позволяет их фиксировать, совмещать изменения, произведённые разными участниками проекта, производить откат к любой более ранней версии проекта, если это требуется. В классических системах контроля версий используется централизованная модель, предполагающая наличие единого репозитория для хранения файлов. Выполнение большинства функций по управлению версиями осуществляется специальным сервером. Участник проекта (пользователь) перед началом работы посредством определённых команд получает нужную ему версию файлов. После внесения изменений пользователь размещает новую версию в хранилище. При этом предыдущие версии не удаляются из центрального хранилища и к ним можно вернуться в любой момент. Сервер может сохранять не полную версию изменённых файлов, а производить так называемую дельта-компрессию — сохранять только изменения между последовательными версиями, что позволяет уменьшить объём хранимых данных. Системы контроля версий поддерживают возможность отслеживания и разрешения конфликтов, которые могут возникнуть при работе нескольких человек над одним файлом. Можно объединить изменения, сделанные разными участниками, вручную выбрать нужную версию, отменить изменения вовсе или заблокировать файлы для изменения. В зависимости от настроек блокировка не позволяет другим пользователям получить рабочую копию или препятствует изменению рабочей копии файла средствами файловой системы ОС, обеспечивая таким образом привилегированный доступ только одному пользователю, работающему с файлом. Системы контроля версий также могут обеспечивать дополнительные, более гибкие функциональные возможности. Например, они могут поддерживать работу с несколькими версиями одного файла, сохраняя общую историю изменений до точки ветвления версий и собственные истории изменений каждой ветви. Обычно доступна информация о том, кто из участников, когда и какие изменения вносил. Обычно такого рода информация хранится в журнале изменений, доступ к которому можно ограничить. В отличие от классических, в распределённых системах контроля версий центральный репозиторий не является обязательным. Среди классических VCS наиболее известны CVS, Subversion, а среди распределённых — Git, Bazaar, Mercurial. Принципы их работы схожи, отличаются они в основном синтаксисом используемых в работе команд.
Система контроля версий Git представляет собой набор программ командной строки. Доступ к ним можно получить из терминала посредством ввода команды git с различными опциями. Благодаря тому, что Git является распределённой системой контроля версий, резервную копию локального хранилища можно сделать простым копированием или архивацией.
Работа пользователя со своей веткой начинается с проверки и получения изменений из центрального репозитория (при этом в локальное дерево до начала этой процедуры не должно было вноситься изменений). Затем можно вносить изменения в локальном дереве и/или ветке. После завершения внесения какого-то изменения в файлы и/или каталоги проекта необходимо разместить их в центральном репозитории.

# Выполнение лабораторной работы

## Настройка GitHub

Создала учётную запись на сайте GitHub ([рис. @fig-001]).

![Аккаунт GitHub](image/0.jpg){#fig-001 width=70%}

## Базовая настройка Git

Сделала предварительную конфигурацию git. В терминале ввела следующие команды, указав свои имя и email ([рис. @fig-002]). 

![Предварительная конфигурация git](image/1.jpg){#fig-002 width=70%}

Настроила кодировку utf-8 для вывода сообщений git ([рис. @fig-003]).

![Предварительная конфигурация git](image/2.jpg){#fig-003 width=70%}

Задала имя master для начальной ветки ([рис. @fig-004]).

![Предварительная конфигурация git](image/3.jpg){#fig-004 width=70%}

Задала параметры autocrlf и safecrlf ([рис. @fig-005]).

![Предварительная конфигурация git](image/4.jpg){#fig-005 width=70%}

## Создание SSH-ключа

Сгенерировала пару ключей: приватный и открытый ([рис. @fig-006]).

![Генерация ключей](image/5.jpg){#fig-006 width=70%}

Скопировала ключ в буфер обмена ([рис. @fig-007]).

![Копирование ключа](image/6.jpg){#fig-007 width=70%}

На сайте GitHub в меню settings в разделе SSH and GPG keys добавила только что созданный SSH-ключ ([рис. @fig-008]).

![Добавление ключа](image/7.jpg){#fig-008 width=70%}

## Создание рабочего пространства и репозитория курса на основе шаблона

Создала каталог для предмета для предмета “Архитектура компьютера” ([рис. @fig-009]).

![Создание каталога](image/8.jpg){#fig-009 width=70%}

## Создание репозитория курса на основе шаблона

В браузере перешла на страницу репозитория с шаблоном курса. Далее нажала “Use this template”, чтобы использовать этот шаблон для своего репозитория ([рис. @fig-010]).

![Шаблон курса](image/9.jpg){#fig-010 width=70%}

Задала имя репозитория и создала его ([рис. @fig-011]).

![Создание каталога](image/10.jpg){#fig-011 width=70%}

В терминале перешла в каталог курса ([рис. @fig-012]).

![Перемещение между директориями](image/11.jpg){#fig-012 width=70%}

Клонировала созданный репозиторий ([рис. @fig-013]).

![Клонирование репозитория](image/12.jpg){#fig-013 width=70%}

## Настройка каталога курса

Перешла в каталог курса ([рис. @fig-014]).

![Перемещение между директориями](image/13.jpg){#fig-014 width=70%}

Создала необходимые каталоги ([рис. @fig-015]).

![Создание директорий](image/14.jpg){#fig-015 width=70%}

Отправила файлы на сервер ([рис. @fig-016])([рис. @fig-017]).

![Загрузка файлов на сервер](image/15.jpg){#fig-016 width=70%}

![Загрузка файлов на сервер](image/16.jpg){#fig-017 width=70%}

Проверила правильность создания иерархии рабочего пространства в локальном репозитории ([рис. @fig-018]).

![Проверка](image/17.jpg){#fig-018 width=70%}

Проверила правильность создания иерархии рабочего пространства на странице GitHub ([рис. @fig-019]).

![Проверка](image/18.jpg){#fig-019 width=70%}

## Выполнение заданий для самостоятельной работы.

Перешла с помощью команды cd в каталог labs/lab02/report и создала в нём файл для отчёта по второй лабораторной работе с помощью команды touch. Проверила, что файл создан, с помощью команды ls ([рис. @fig-020]).

![Создание файлов](image/19.jpg){#fig-020 width=70%}

Оформить отчёт я смогу в текстовом редакторе LibreOffice Writer, найдя его в меню приложений ([рис. @fig-021]).

![Поиск приложения](image/20.jpg){#fig-021 width=70%}

После открытия редактора, открыла в нем созданный файл и начала работу над отчётом ([рис. @fig-022]).

![Открытие файла](image/21.jpg){#fig-022 width=70%}

C помощью команды cd перешла в каталог lab01/report и переместила в него отчёт по первой лабораторной работе с помощью команды mv. Проверила, что файл успешно перемещён, с помощью ls ([рис. @fig-023]).

![Перемещение файла](image/22.jpg){#fig-023 width=70%}

С помощью команды git add добавила в коммит отчёты по двум лабораторным работам ([рис. @fig-024]).

![git add](image/23.jpg){#fig-024 width=70%}

Сохранила изменения на сервере командой git commit -m “Add existing file”, пояснив добавление файлов ([рис. @fig-025])

![git commit](image/24.jpg){#fig-025 width=70%}

Отправилa в центральный репозиторий изменения командой git push -f origin master ([рис. @fig-026]).

![git push](image/25.jpg){#fig-026 width=70%}

Проверилa на сайте GitHub правильность выполнения заданий. Вижу, что пояснение к совершённым действиям отображается ([рис. @fig-027]).

![Проверка](image/26.jpg){#fig-027 width=70%}

При просмотре изменений увиделa, что были добавлены файлы с отчётами по лабораторным работам ([рис. @fig-028]).

![Проверка](image/27.jpg){#fig-028 width=70%}

Проверилa, что отчёты по лабораторным работам находятся в соответствующих каталогах репозитория: отчёт по первой лабораторной в lab01/report ([рис. @fig-029]), по второй – в lab02/report ([рис. @fig-030]).

![Проверка](image/28.jpg){#fig-029 width=70%}

![Проверка](image/29.jpg){#fig-030 width=70%}

# Выводы

В ходе работы я приобрелa практические навыки работы с системой контроля версий GitHub, разобрав следующие команды: clone, add, commit, push. Также изучилa идеологию и применение подобных систем.

# Список литературы

1. [Архитектура ЭВМ](https://esystem.rudn.ru/pluginfile.php/1584622/mod_resource/content/1/%D0%9B%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%20%E2%84%963.pdf)
2. [Git - gitattributes Документация](https://git-scm.com/docs/gitattributes)

